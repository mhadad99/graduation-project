# Generated by Django 5.2 on 2025-05-06 00:33

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(max_length=255)),
                ('second_name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('user_name', models.CharField(max_length=255, unique=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='profile_photos/')),
                ('birth_date', models.DateField(blank=True, default='2000-01-01')),
                ('phone', models.CharField(blank=True, max_length=14)),
                ('bio', models.TextField(blank=True)),
                ('address', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_deleted', models.BooleanField(default=False)),
                ('is_registered', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('user_type', models.CharField(choices=[('none', 'None'), ('freelancer', 'Freelancer'), ('client', 'Client')], default='none', help_text='Tracks whether the user is a freelancer, client, or neither.', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
